# Common configuration

---
- name: Install packages
  apt:
    name:
      - ansible
      - vim
      - terminator
      - htop
      - gparted
      - trash-cli
      - apt-file
      - curl
      - build-essential
      - gcc-multilib
      - k4dirstat
      - python3-pip
      - ffmpeg # For youtube-dl
      - abcde
      - nmap
      - ncat
      - nfs-common
      - ecryptfs-utils
      - wireshark
      - git
      - gitk
      - subversion
      - mlocate
      - binwalk
      - fdupes
      - alpine
      - whois
      - unrar
      - tshark
      - sqlite3
      - screen
      - python3-venv
      - pv
      - hexedit
      - ipmitool
      - iotop
      - cmake
      - virt-manager
      # - gettext      # Rhythmbox cover art browser
      # - python3-lxml # Rhythmbox cover art browser
      - checksec
      - tmux
      - llvm
      - clang
      - clang-tools
      - docker.io
      - docker-compose
      - audacity
      - libavcodec-dev
      - lame
      - neofetch
      - dos2unix
      - nodejs
      - npm
      - default-jdk
      - libstdc++-9-doc # libstdc++ man pages, e.g. man str:wstring
      # manpages-dev # Provides Linux system calls and libc library calls, already installed
      - smartmontools
      - cython3
      - checkinstall
      - apktool # For android reversing
      - texinfo # For crosstool-ng
      - help2man # For crosstool-ng
      - libtool-bin # For crosstool-ng
      - flex # For crosstool-ng
      - libcurl4-gnutls-dev # For transmission build
      - gettext # For transmission build
      - libindicator3-dev # For transmission build
      - libgtkmm-3.0-dev # For transmission build
      - libtool # For filezilla build
      - nettle-dev # For filezilla build
      - libgnutls28-dev # For filezilla build
      - libwxgtk3.0-gtk3-dev # For filezilla build
      - libpugixml-dev # For filezilla build
      - libgtk-3-dev # For filezilla build
      - libsqlite3-dev # For filezilla build
      - easy-rsa # For openvpn key management
      - libtalloc-dev # For freeradius build
      - libkqueue-dev # For freeradius build
      - figlet
      - wine # For afl wine mode
      - wine64
      - bison # Required for AFLplusplus QEMU build
      - chrpath # for yocto builds
      - awscli # For AWS management, obvs
      - icedtea-netx # For server remote console
      - brasero # For optical media writing

    state: present
    update_cache: yes
  become: true

- name: Install snapcraft
  snap:
    name: snapcraft
    state: present
    classic: true
  become: true
  
- name: Install snaps
  snap:
    name:
      - multipass
      - lxd
      - gimp
      - keepassxc
      - vlc
      - scummvm
      - spotify
    state: present
  become: true

- name: Add Google's Linux signing key
  shell: wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
  become: true

- name: Add Google Chrome repo
  lineinfile:
    path: /etc/apt/sources.list.d/google-chrome.list
    create: yes
    regexp: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
    line: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
  become: true

- name: Install Google Chrome
  apt:
    name: google-chrome-stable
    state: present
    update_cache: yes
  become: true

- name: Check whether vscode exists or not
  stat:
    path: /usr/bin/code
  register: stat_code

- name: Install Visual Studio Code
  apt:
    deb: https://go.microsoft.com/fwlink/?LinkID=760868
  become: true
  when: not stat_code.stat.exists

- name: Install Microsoft Packages
  apt:
    deb: https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
  become: true

- name: Install .NET Core SDK
  apt:
    name: dotnet-sdk-3.1
    state: present
    update_cache: yes
  become: true

# - name: Enable Firefox AppArmor profile (Creates problems with downloads)
#   shell: rm -f /etc/apparmor.d/disable/usr.bin.firefox && cat /etc/apparmor.d/usr.bin.firefox | sudo apparmor_parser -a
#   become: true

- name: Redirect root email to user
  lineinfile:
    path: /root/.forward
    state: present
    create: true
    regexp: ".*"
    line: "{{ ansible_user_id }}"
  become: true

- name: Add user groups
  user:
    name: "{{ ansible_user_id }}"
    append: yes
    groups: "{{ item }}"
  become: true
  loop:
    - docker
    - lxd

- name: Wine winepath symlink (AFLplusplus fix)
  file:
    src:  "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop:
    - { src: /usr/bin/winepath, dest: /usr/lib/wine/winepath }
  become: true

- name: Increase max_user_watches
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "fs.inotify.max_user_watches"
    line: "fs.inotify.max_user_watches = 524288"
  become: true

- name: Increase max_user_watches
  shell: sysctl -p
  become: true

# Below are user changes only

- name: Install pip packages
  pip:
    name:
      - youtube-dl
      - docker
      - scapy
      - pefile # Required for AFLplusplus wine mode
    extra_args: --user

- name: Install Visual Studio Code modules
  shell: "code --install-extension {{ item }}"
  loop:
    - ms-python.python
    - ms-python.vscode-pylance
    - ms-vscode.cpptools
    - ms-dotnettools.csharp
    - redhat.java
    - vscjava.vscode-java-debug
    - ms-vscode.cmake-tools
    - ms-azuretools.vscode-docker
    - github.vscode-codeql
    - thiagolciobittencourt.ubuntuvscode
    - dbaeumer.vscode-eslint
    - vscjava.vscode-java-pack
    - ms-vscode.hexeditor
    - ms-vscode-remote.remote-ssh
    - ms-vscode-remote.remote-containers

- name: Download gdb GEF
  shell: wget -O ~/.gdbinit-gef.py -q https://github.com/hugsy/gef/raw/master/gef.py

- name: Install gdb GEF
  lineinfile:
    path: ~/.gdbinit
    state: present
    create: true
    regexp: "source ~/.gdbinit-gef.py"
    line: "source ~/.gdbinit-gef.py"

- name: Get node.js packages
  npm:
    name: "{{ item }}"
    state: present
    global: no
    path: /tmp
  loop:
    - yo
    - generator-code
    - vsce

- name: Check whether crosstool-ng exists or not
  stat:
    path: ~/crosstool-ng-1.24.0
  register: stat_crosstool

- name: Download crosstool-ng
  get_url:
    url: "{{ item }}"
    dest: /tmp
  loop:
    - http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.24.0.tar.xz
    - http://crosstool-ng.org/download/crosstool-ng/crosstool-ng-1.24.0.tar.xz.sig
  when: not stat_crosstool.stat.exists

- name: Create crosstool-ng src storage directory
  file:
    path: ~/src
    state: directory

- name: Get crosstool-ng keys
  shell: gpg --recv-keys 64AAFBF214758C63409345F97848649B11D618A4
  when: not stat_crosstool.stat.exists

- name: Verify crosstool-ng download and extract
  shell: gpg --verify crosstool-ng-1.24.0.tar.xz.sig && tar -C ~ -xf crosstool-ng-1.24.0.tar.xz
  args:
    chdir: /tmp
  when: not stat_crosstool.stat.exists

- name: Build crosstool-ng
  shell: ./configure --enable-local && make
  args:
    chdir: ~/crosstool-ng-1.24.0
  when: not stat_crosstool.stat.exists

- name: Add crosstool-ng to path
  lineinfile:
    path: ~/.bashrc
    regexp: "export PATH=$PATH:~/crosstool-ng-1.24.0"
    line: "export PATH=$PATH:~/crosstool-ng-1.24.0"

- name: Create project directory (I like a project directory)
  file:
    path: ~/projects
    state: directory

- name: Clone AFLplusplus
  git:
    repo: https://github.com/AFLplusplus/AFLplusplus.git
    dest: ~/projects/AFLplusplus
    version: 2.68c
    force: true

- name: Build afl
  shell: CPU_TARGET=i386 make distrib
  args:
    chdir: ~/projects/AFLplusplus

- name: Add afl to path
  lineinfile:
    path: ~/.bashrc
    regexp: "export PATH=$PATH:~/projects/AFLplusplus"
    line: "export PATH=$PATH:~/projects/AFLplusplus"

- name: Add afl to path
  lineinfile:
    path: ~/.bashrc
    regexp: "export AFL_PATH=~/projects/AFLplusplus"
    line: "export AFL_PATH=~/projects/AFLplusplus"

- name: Set AFL wine path
  lineinfile:
    path: ~/.bashrc
    regexp: "export AFL_WINE_PATH=/usr/lib/wine/wine"
    line: "export AFL_WINE_PATH=/usr/lib/wine/wine"
  
- name: Create local bin directory
  file:
    path: ~/.local/bin/
    state: directory

- name: Create afl-init script
  copy:
    content: |
      #!/bin/bash
      echo core | sudo tee /proc/sys/kernel/core_pattern
      echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
    dest: ~/.local/bin/afl-init
    mode: '0755'

  # I want to pull various useful docker images, but this fails until the session is restarted (usermod not taken effect yet).
  # - name: Pull docker images
  #   docker_image:
  #     name: "{{ item }}"
  #     source: pull
  #   loop:
  #     - aflplusplus/aflplusplus

